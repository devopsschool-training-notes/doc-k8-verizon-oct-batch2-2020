Rajesh Kumar
================
1 2 3 4 5 6 7 8 9 
=============================
2 Break - 15 mins - 20 mins
	  	11.30 AM
		4:00 PM 
	9-30 AM  - 6:30 PM IST
Lunch - 1 PM IST - 2 PM IST
==============================
Demo - my Box
Lab - 
==============================
Notes - Github
==============================
Pre Test - Now
https://www.devopsschool.com/lms/

Docker Essential Quiz - 1 
https://www.devopsschool.com/lms/mod/quiz/view.php?id=250 - 15 mins

Kubernetes Essential Quiz - 1
https://www.devopsschool.com/lms/mod/quiz/view.php?id=319 - 10 mins

Post Test	
==============================
What is Docker?
	Container mgmt tool/Platform
	Releasee
			Community - Free
			Enterprise - paid
	Written in Golang
	From Soloman hykes
	

	What is Container?
		Each container is a USER NS
						with 
							1 NET NS
							1 PID nS
							1 MNT NS
								ROOTFS + USERFS + APPFS
=========================================================================
		Container is a independent RUN TIME APP Env.
					without any depen outside

	What is tool?
		To Save cost
		To Improve Quality
		To Save time
=================================
How do we run APP?
What are the components in Computer to run Any App?
What are the components needed in a Computer to run Any Software?
=================================
30 YEARS		| 	20 YEARS	| 	NOW
======================================================================
Desktop				Virual Machine	`	Container
-----------------------------------------------------------------------
				Internet
------------------------------------------------------------------------
				Run APP In DATA Center
					To Save RUN TIME cost
					To Improve Quality of Software
					To Save time in terms releases

To run APP
				INIT		ALLOWED
		USER		1 		MULTIPLE
		NET		1 		1
		MNT		1 		1
		PID		1 		1
=================================================================
OS  ->  KERNAL  -> 
		Namespaces
				INIT		ALLOWED
		USER		1 		MULTIPLE
		NET		1 		1
		MNT		1 		1
		PID		1 		1

		USER IS ROOT or Not Root
		--------------------
		Capabilities

		PID gets CPU+RAM allocation
		---------------------
		Crgoups
=========================================
How can we run APPS without too many OS of Vms?
		in Data center?
How can we reduce a wasteage of Vms?
=
==========================================
MNT === Filesystem(S)

BOOTFS 		ROOTFS		USERFS		APPFS
Kernal		/		USER_HOME	APP_HOME			
=========================================================
			OS



Microsfot + Linux
========================
NO. - We would not allowed to init 
		MNT
		PID
		NET 
			to each user.
============================================
WHY???
	OS for
	PC = PERSONAL Computer for HUMAN
			NOT FOR DATA CENTER
=============================================

Other Container Interface?
https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/

How Docker Works aka Docker Arch?
===========================================
Human --> Docker Client ---REST---> Docker Deamon	-> ContainerD -> Kernal 
				    Docker Server		-> ContainerD
									RUNC
	=========================================
			Docker Engine

Docker Components
========================
Docker Engine	- A platform which need to be installed.

Docker Image 
		IS YOUR APP.
		Collection of Filesystem(S)
		ROOTFS + USERFS + APPFS
		One Copy of Image get mounted to each container
		From one image - you can get multiple container
		Whatever you have in image - you have in container.

Docker Registry
		Regisrty has repo(s)
		Each repo has filesystem(s) named with an image.
		PUBLIC
			hub.docker.com
				repos - aka image
			Google Registry

		PVT
			Artifactory
			Nexus
			ECR
Docker Container

		The Moment you run an image - 
					One USER NS get initalized with
						MOUNT form image
						NET
						PID


Docker Workflow
=========================================================
run an image
===========
docker run app(img name)

Human -> Client --> Server(Deamon)
			- Check - Do i have an Image in Local Registry
				YES ---> Create a container
				NO --> Download from hub.docker.com to Local Registry
					& Create a container


Docker Installtion
=================================================
65.0.104.191
65.0.104.191
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

  1  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    2  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    3  sudo yum install â€“y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    4  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
    5  sudo yum install -y docker-ce
    6  docker -v
    7  docker version
    8  sudo systemctl enable docker
    9  sudo systemctl start docker
   10  docker version
   11  docker info
   12  history
   13  which docker
   14  ps -eaf | grep docker
   15  which containerd
   16  history


Vms LifeCycle
=============================================
Create -> Start -> Stop -> Start -> Restart -> Pause -> UnPause -> Kill -> Remove

Container LifeCycle
=============================================
Create -> Start -> Stop -> Start -> Restart -> Pause -> UnPause -> Kill -> Remove

Jenkins
		Web based
		8080
		50000
		JAVA based

 19  docker images
   20  docker ps
   21  docker ps -a
   22  docker pull jenkins
   23  clear
   24  docker images
   25  docker ps
   26  docker ps -a
   27  docker create jenkins
   28  docker ps
   29  docker ps -a
   30  clear
   31  docker ps -a
   32  docker ps
   33  dcoker ps -a
   34  docker ps -a
   35  docker create jenkins
   36  docker ps -a
   37  clea
   38  rclear
   39  clear
   40  ls
   41  docker ps -a
   42  docker start 17476d7826cb
   43  docker ps -a
   44  docker start e20335986e52
   45  docker ps -a
   46  cleaer
   47  clear
   48  docker ps
   49  docker stop 17476d7826cb e20335986e52
   50  docker ps -a
   51  docker stary 17476d7826cb e20335986e52
   52  clear
   53  docker start 17476d7826cb e20335986e52
   54  docker ps -a
   55  docker ps -a
   56  docker restart 17476d7826cb e20335986e52
   57  docker ps -a
   58  clear
   59  docker pause 17476d7826cb e20335986e52
   60  docker ps -a
   61  docker unpause 17476d7826cb e20335986e52
   62  docker ps -a
   63  clear
   64  docker kill 17476d7826cb e20335986e52
   65  docker ps -a
   66  docker start 17476d7826cb
   67  docker ps -a
   68  docker rm 17476d7826cb
   69  docker rm e20335986e52
   70  history


LAB 		15 mins
===========

Question & Assignment
===========================
STOP Vs Kill		5 mins
Pause VS unPause 	5 mins

===============================================================
20 mins - 
==================================================================

		The Moment you run an image - 
					One USER NS get initalized with
						MOUNT form image
						NET
						PID

    3  ps
    4  cd
    5  pwd
    6  ls
    7  ps -eaf | grep 3423
    8  ps -eaf | grep 3364
    9  ps -eaf | grep 1432
   10  ps -eaf | grep 1236
   11  ps -eaf
   12  clear
   13  history


   85  docker ps
   86  ps -eaf | grep docker
   87  ps -eaf | grep 19226
   88  ps -eaf | grep 8938
   89  ps -eaf
   90  clear


 93  docker ps
   94  df -kh'
   95  df -kh
   96  docker stop 17476d7826cb
   97  df -kh
   98  docker start 17476d7826cb
   99  clear
  100  df -kh
  101  clear
  102  df -kh
  103  cd /var/lib/docker/overlay2/6aaca336da5ea89af721cc556c6d2b6f0e19d603742f694762747358cc2bddf0/merged
  104  clear
  105  ls
  106  cd home
  107  ls
  108  cd ..
  109  ls
  110  cd var
  111  ls
  112  cd jenkins_home
  113  pwd
  114  ls
  115  clear
  116  docker ps
  117  docker exec 17476d7826cb df -kh
  118  docker exec 17476d7826cb ls /
  119  docker exec 17476d7826cb ls /var
  120  ls
  121  clear
  122  cd
  123  ;ls
  124  clear
  125  docker ps
  126  history




  127  clear
  128  docker ps
  129  docker inspect 17476d7826cb
  130  clear
  131  docker inspect 17476d7826cb | grep -i ip
  132  ping 172.17.0.2
  133  clear
  134  ls
  135  ps -eaf
  136  clear
  137  docker ps
  138  docker exec 17476d7826cb ps -eaf
  139  ps -eaf
  140  docker exec 17476d7826cb ps -eaf
  141  history

============================================================
RUN
=======================
pull + create + start + Attach(Become)


RUN -d
=======================
pull + create + start + deAttach(do not Become)

=========================================================
PHYSICAL SERVER 	Virtual SERVER		Container 
is running		is running		is running
ONLY and ONLY		ONLY and ONLY		ONLY and ONLY
When 			When 			When 
PID 1 is running	PID 1 is running	PID 1 is running		

PID 1 is systemd	PID 1 is systemd	PID 1 ANYTHING
						/bin/bash
						/abc
						/xyz
						perl
						python
						java
						bash
						ruby

How to use container?
=====================================
You want to go inside a container using SHELL?
1. exec
		would execute an executable inside a container
		but with -it and bash - you can interact
2. Attach
		would attached to a PID 1. (attach to container)
		Use Case 
		- When you have PID 1 of the container is /bin/bash - then you should attached
		- When you want to see logs of PID1..

 166  docker ps
  167  docker exec 17476d7826cb ls
  168  docker exec 17476d7826cb df
  169  clear
  170  docker exec 17476d7826cb ps
  171  docker exec 17476d7826cb fffff
  172  docker ps
  173  docker exec -it 17476d7826cb /bin/bash
  174  docker ps
  175  clear
  176  docker ps
  177  docker attach 17476d7826cb
  178  docker ps
  179  docker ps -a


OR
You want to access app from outside of the container? (Network)

  190  dcoker ps
  191  clear
  192  docker ps
  193  docker inspect 97494a0bdd4e | grep -i ip
  194  docker inspect d393fe34bfdc | grep -i ip
  195  curl http://172.17.0.2:8080
  196  curl http://172.17.0.3:8080


$ docker run jenkins
$ docker run -d jenkins
$ docker run -d -p 8080:8080 jenkins
			ext:int
			node:container

docker run -d -p 8090:8080 jenkins

